startdate = "2017-06",
enddate = "2020-03",
# token = NEON_TOKEN, #Uncomment to use your token
check.size = FALSE)
# examine the structure of the data object that is returned
my_data %>% names()
my_data$neon.ecocomdp.20120.001.001 %>% names()
# short list of package summary data
my_data$neon.ecocomdp.20120.001.001$metadata$data_package_info
# validation issues? None if returns an empty list
my_data$neon.ecocomdp.20120.001.001$validation_issues
# examine the tables
my_data$neon.ecocomdp.20120.001.001$tables %>% names()
my_data$neon.ecocomdp.20120.001.001$tables$taxon %>% head()
my_data$neon.ecocomdp.20120.001.001$tables$observation %>% head()
# search for data sets with periphyton or algae
# regex works!
my_search_result <- ecocomDP::search_data(text = "periphyt|algae")
View(my_search_result)
# pull data for the NEON "Periphyton, seston, and phytoplankton collection"
# data product
my_data <-
ecocomDP::read_data(
id = "neon.ecocomdp.20166.001.001",
site = "ARIK",
startdate = "2017-06",
enddate = "2020-03",
# token = NEON_TOKEN, #Uncomment to use your token
check.size = FALSE)
## ----explore-data-structure----------------------------------------------------------------------------------------------------
# Explore the structure of the returned data object
my_data %>% names()
my_data[[1]] %>% names()
my_data[[1]]$metadata$data_package_info
my_data[[1]]$validation_issues
my_data[[1]]$tables %>% names()
my_data[[1]]$tables$location
my_data[[1]]$tables$taxon %>% head()
my_data[[1]]$tables$observation %>% head()
# flatten the ecocomDP data tables into one flat table
my_data_flat <- my_data[[1]]$tables %>% ecocomDP::flatten_data()
# Verify that only benthic algae standardized to area
# are returned in this data pull:
my_data_flat$unit %>%
unique()
# filter the data to only records standardized to area
# sampled
my_data_benthic <- my_data_flat %>%
dplyr::filter(
!variable_name %in% c("valves","cells"),
unit == "cells/cm2")
# Check for multiple taxon counts per taxon_id by
# event_id.
my_data_benthic %>%
group_by(event_id, taxon_id) %>%
summarize(n_obs = length(event_id)) %>%
dplyr::filter(n_obs > 1)
# Per instructions from the lab, these
# counts should be summed.
my_data_summed <- my_data_benthic %>%
group_by(event_id,taxon_id) %>%
summarize(value = sum(value, na.rm = FALSE))
my_data_cleaned <- my_data_benthic %>%
dplyr::select(
event_id, location_id, datetime,
taxon_id, taxon_rank, taxon_name) %>%
distinct() %>%
right_join(my_data_summed)
# check for duplicate records, there should not
# be any at this point.
my_data_cleaned %>%
group_by(event_id, taxon_id) %>%
summarize(n_obs = length(event_id)) %>%
dplyr::filter(n_obs > 1)
# which taxon rank is most common
my_data_cleaned %>%
ggplot(aes(taxon_rank)) +
geom_bar()
# convert densities from per m2 to per cm2
my_data_long <- my_data_cleaned %>%
filter(taxon_rank == "species") %>%
select(event_id, taxon_id, value)
# make data wide
my_data_wide <- my_data_long %>%
pivot_wider(names_from = taxon_id,
values_from = value,
values_fill = list(value = 0)) %>%
tibble::column_to_rownames("event_id")
# Calculate and plot species accumulcation curve for the 11 sampling events
# The CIs are based on random permutations of observed samples
alg_spec_accum_result <- my_data_wide %>% vegan::specaccum(., "random")
plot(alg_spec_accum_result)
# Extract the resampling data used in the above algorithm
spec_resamp_data <- data.frame(
data_set = "observed",
sampling_effort = rep(1:nrow(alg_spec_accum_result$perm),
each = ncol(alg_spec_accum_result$perm)),
richness = c(t(alg_spec_accum_result$perm)))
# Fit species accumulation model
spec_accum_mod_1 <- my_data_wide %>% vegan::fitspecaccum(model = "arrh")
# create a "predicted" data set from the model to extrapolate out
# beyond the number of samples collected
sim_spec_data <- data.frame()
for(i in 1:100){
d_tmp <- data.frame(
data_set = "predicted",
sampling_effort = i,
richness = predict(spec_accum_mod_1, newdata = i))
sim_spec_data <- sim_spec_data %>%
bind_rows(d_tmp)
}
# plot the "observed" and "simulated" curves with 95% CIs
data_plot <- spec_resamp_data %>% bind_rows(sim_spec_data)
data_plot %>%
ggplot(aes(sampling_effort, richness,
color = as.factor(data_set),
fill = as.factor(data_set),
linetype = as.factor(data_set))) +
stat_summary(fun.data = median_hilow, fun.args = list(conf.int = .95),
geom = "ribbon", alpha = 0.25) +
stat_summary(fun.data = median_hilow, geom = "line",
size = 1)
setwd("~/Dropbox/Projects/Done/Best Practices Paper/Data/data files V3/Data inputs")
##load packages----
require(dplyr)
require(purrrlyr)
require(tidyverse)
require(tidyr)
require(reshape2)
require(ggplot2)
require(stringr)
require(ape)
require(caper)
require(phytools)
setwd("~/Dropbox/Projects/Done/Best Practices Paper/Data/data files V3/Data inputs")
##Load packages----
require(tidyverse)
require(nlme)
require(dplyr)
require(ggplot2)
require(reshape2)
require(plyr)
require(stringr)
#require(OutlierDetection)
#call maha function from https://cran.r-project.org/src/contrib/Archive/OutlierDetection/
require(utils)
options(stringsAsFactors = FALSE)
filenames <- list.files(path = "output_reasoned_csv",
pattern = "*.csv",
full.names = TRUE)
futres <- data.frame()
for(i in seq_along(filenames)){
x <- read.csv(filenames[i], header = TRUE)
#assign(paste("df", i, sep = "."), x)
futres <- rbind(futres, x)
}
##clean scientificCNames
df <- futres
setwd("~/Desktop/bpp v2")
write.csv(futres, "futres.csv")
df <- futres
##clean up lifeStage
unique(df$lifeStage)
df$lifeStage[df$lifeStage == "" |
df$lifeStage == "lifeStage"] <- "Not Collected"
df$measurementValue <- as.numeric(df$measurementValue)
df$measurementValue[df$measurementValue == 0] <- NA
#change known taxonomy error: Spermophilus beecheyi
df$scientificName[df$scientificName == "Spermophilus beecheyi"] <- "Otospermophilus beecheyi"
df<- df[!grepl('sp.', df$scientificName),]
#turn trinomials into binomials
df$scientificName <- word(df$scientificName, 1,2, sep = " ")
##extract only binomials
#code from https://stackoverflow.com/questions/8920145/count-the-number-of-all-words-in-a-string
nwords <- function(string, pseudo=F){
ifelse( pseudo,
pattern <- "\\S+",
pattern <- "[[:alpha:]]+"
)
str_count(string, pattern)
}
df$nwords <- nwords(df$scientificName)
df <- df %>%
filter(nwords == 2) %>%
select(-nwords)
length(unique(df$scientificName)) #3767
##extract only binomials
#code from https://stackoverflow.com/questions/8920145/count-the-number-of-all-words-in-a-string
nwords <- function(string, pseudo=F){
ifelse( pseudo,
pattern <- "\\S+",
pattern <- "[[:alpha:]]+"
)
str_count(string, pattern)
}
df$nwords <- nwords(df$scientificName)
df <- df %>%
filter(nwords == 2) %>%
select(-nwords)
unique(df$nwords)
df <- df %>%
filter(nwords == 2) %>%
dplyr::select(-nwords)
length(unique(df$scientificName)) #3767
#get rid of curly brackets
df$measurementType<- gsub("/}", "", df$measurementType)
df$measurementType
#get rid of curly brackets
df$measurementType<- gsub("}", "", df$measurementType)
df$measurementType <- gsub("{", "", df$measurementType)
df$measurementType <- gsub("{/", "", df$measurementType)
df$measurementType <- gsub("/{", "", df$measurementType)
df$measurementType <- gsub("\{", "", df$measurementType)
df$measurementType <- gsub("{\", "", df$measurementType)
#### Figure 1 panel 1: lifeStage ----
df.fig1 <- df
length(df.fig1$measurementValue[df.fig1$scientificName == "Peromyscus maniculatus" &
df.fig1$measurementType == "{body mass}"]) #31699
length(df.fig1$measurementValue[df.fig1$scientificName == "Otospermophilus beecheyi" &
df.fig1$measurementType == "{body mass}"]) #507
#care about estimated and lifeStage
#inferred value = already converted units to "mm" or "g"
#estimated value = made assumptions about which part of the string was the trait value
#I will called estimated value "inferred value" for the category/figure
df.fig1$cat <- paste(df.fig1$lifeStage, df.fig1$measurementMethod)
unique(df.fig1$cat)
df.fig1$cat[df.fig1$cat == "Not Collected Unknown" |
df.fig1$cat == " Unknown" |
df.fig1$cat == "lifeStage measurementMethod" |
df.fig1$cat == "Not Collected Extracted with Traiter" |
df.fig1$cat == "Not Collected Extracted with Traiter ; inferred value" |
df.fig1$cat == " Hopkins, S. S. (2008). Reassessing the Mass of Exceptionally Large Rodents Using Toothrow Length and Area as Proxies for Body Mass. Journal of Mammalogy, 89(1), 232â€“243. https://doi.org/10.1644/06-mamm-a-306.1"] <- "No stage; value possibly good" #lightgoldenrod3
df.fig1$cat[df.fig1$cat == "adult Unknown" |
df.fig1$cat == "adult Extracted with Traiter" |
df.fig1$cat == "adult Extracted with Traiter ; inferred value"] <- "Adult; value possibly good" #darkorchid4
df.fig1$cat[df.fig1$cat == "juvenile Unknown" |
df.fig1$cat == "juvenile Extracted with Traiter" |
df.fig1$cat == "juvenile Extracted with Traiter ; inferred value"] <- "Juvenile; value possibly good" #gray74
df.fig1$cat[df.fig1$cat == "Not Collected Extracted with Traiter ; estimated value" |
df.fig1$cat == "Not Collected Extracted with Traiter ; estimated value; inferred value"] <- "No stage; value inferred" #lightgoldenrod1
df.fig1$cat[df.fig1$cat == "adult Extracted with Traiter ; estimated value" |
df.fig1$cat == "adult Extracted with Traiter ; estimated value; inferred value"] <- "Adult; value inferred" #darkorchid
df.fig1$cat[df.fig1$cat == "juvenile Extracted with Traiter ; estimated value" |
df.fig1$cat == "juvenile Extracted with Traiter ; estimated value; inferred value"] <- "Juvenile; value inferred" #gray74
df.fig1$cat <- as.factor(df.fig1$cat)
df.fig1$cat = relevel(df.fig1$cat, "Adult; value possibly good")
df.fig1$cat <- factor(df.fig1$cat, levels = c("Adult; value possibly good", "Adult; value inferred",
"Juvenile; value possibly good", "Juvenile; value inferred",
"No stage; value possibly good", "No stage; value inferred"))
df.pema1 <- subset(df.fig1, df.fig1$scientificName == "Peromyscus maniculatus" &
df.fig1$measurementType == "{body mass}" &
!is.na(df.fig1$measurementValue))
length(df.pema1$measurementValue) #31689
unique(df.pema1$cat)
length(df.pema1$cat[df.pema1$cat == "Adult; value possibly good"]) #3021
length(df.pema1$cat[df.pema1$cat == "Juvenile; value possibly good"]) #951
length(df.pema1$cat[df.pema1$cat == "No stage; value possibly good"]) #27717
p.pema1 <- ggplot(df = df.pema1) +
geom_density(aes(x = df.pema1$measurementValue, fill = df.pema1$cat), alpha = 0.6) +
scale_fill_manual(values = c("darkorchid4", "gray74", "lightgoldenrod3"),
name="Quality Category") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
ggtitle("Peromyscus maniculatus N = 31689") +
scale_x_continuous(name = "Body Mass (g)", limits = c(0, 50)) +
scale_y_continuous(name = "Density", limits = c(0, .25))
ggsave(p.pema1, file = paste0("orig.dist.lifeStage.mouse",".png"),
width = 14, height = 10, units = "cm")
df.otbe1 <- subset(df.fig1, df.fig1$scientificName == "Otospermophilus beecheyi" &
df.fig1$measurementType == "{body mass}" &
!is.na(df.fig1$measurementValue))
length(df.otbe1$measurementValue) #507
length(df.otbe1$measurementValue[df.otbe1$lifeStage == "adult"]) #30
length(df.otbe1$measurementValue[df.otbe1$lifeStage == ""]) #182
length(df.otbe1$measurementValue[df.otbe1$lifeStage == "Not Collected"]) #280
length(df.otbe1$measurementValue[df.otbe1$lifeStage == "juvenile"]) #15
unique(df.otbe1$cat)
length(df.otbe1$cat[df.otbe1$cat == "Adult; value possibly good"]) #30
length(df.otbe1$cat[df.otbe1$cat == "Juvenile; value possibly good"]) #15
length(df.otbe1$cat[df.otbe1$cat == "No stage; value possibly good"]) #462
p.otbe1 <- ggplot(df = df.otbe1) +
geom_density(aes(x = df.otbe1$measurementValue, fill = df.otbe1$cat), alpha = 0.4) +
scale_fill_manual(values = c("darkorchid4", "gray74", "lightgoldenrod3", "lightgoldenrod1"),
name="Quality Category") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
ggtitle("Otospermophilus beecheyi N = 507") +
scale_x_continuous(name = "Body Mass (g)", limits = c(0, 1500)) +
scale_y_continuous(name = "Density", limits = c(0, .01))
ggsave(p.otbe1, file=paste0("orig.dist.lifeStage.squirrel",".png"),
width = 14, height = 10, units = "cm")
##Mahalanobis Outlier test----
df.test <- df
#add rownames for indexing
rownames(df.test) <- seq(1, nrow(df.test),1)
#need to select out trait
#remove NAs from trait
#apply maha() function
#select out indices
#label those rows as outliers
#want to find outliers for known adults and non-estimated values
sp <- unique(df.test$scientificName)
length(sp)
nrow(df.test)
df.test$measurementStatus <- ""
##maha function from https://cran.r-project.org/src/contrib/Archive/OutlierDetection/
setwd("~/GitHub/futres/Best-Practices-Paper/scripts/OutlierDetection/R")
source("Maha.R")
##test with P. maniculatus
pema <- subset(df.test, subset = df.test[,"scientificName"] == "Peromyscus maniculatus" &
df.test[,"measurementType"] == "{body mass}" &
df.test[,"lifeStage"] == "adult",
select = "measurementValue") %>%
mutate_at("measurementValue", as.numeric)%>%
drop_na()
outlier.pema <- maha(pema, cutoff = 0.95, rnames = FALSE)
##now for all:
for(i in 1:length(sp)){
sub <- subset(df.test, subset = df.test[,"scientificName"] == sp[i] &
df.test[,"measurementType"] == "{body mass}" &
df.test[,"lifeStage"] == "adult",
select = "measurementValue") %>%
mutate_at("measurementValue", as.numeric) %>%
drop_na()
if(isTRUE(nrow(sub) >= 10)){
outlier <- maha(sub, cutoff = 0.95, rnames = FALSE)
index <- names(outlier[[2]])
if(isTRUE(length(index) != 0)){
df.test[index,"measurementStatus"] <- "outlier"
}
}
else if(isTRUE(nrow(sub) <= 10)){
df.test$measurementStatus[df.test$scientificName == sp[i]] <- "too few records"
}
else{
next
}
}
for(i in 1:length(sp)){
sub <- subset(df.test, subset = df.test[,"scientificName"] == sp[i] &
df.test[,"measurementType"] == "{body length}" &
df.test[,"lifeStage"] == "adult",
select = "measurementValue") %>%
mutate_at("measurementValue", as.numeric) %>%
drop_na()
if(isTRUE(nrow(sub) == 0)){
next
}
else if(isTRUE(length(unique(sub$measurementValue)) == 1)){
next
}
else if(isTRUE(nrow(sub) >= 10)){
outlier <- maha(sub, cutoff = 0.95, rnames = FALSE)
index <- names(outlier[[2]])
if(isTRUE(length(index) != 0)){
df.test[index,"measurementStatus"] <- "outlier"
}
}
else if(isTRUE(nrow(sub) <= 10)){
df.test$measurementStatus[df.test$scientificName == sp[i]] <- "too few records"
}
else{
next
}
}
for(i in 1:length(sp)){
sub <- subset(df.test, subset = df.test[,"scientificName"] == sp[i] &
df.test[,"measurementType"] == "{tail length}" &
df.test[,"lifeStage"] == "adult",
select = "measurementValue") %>%
mutate_at("measurementValue", as.numeric) %>%
drop_na()
if(isTRUE(nrow(sub) == 0)){
next
}
else if(isTRUE(nrow(sub) >= 10)){
outlier <- maha(sub, cutoff = 0.95, rnames = FALSE)
index <- names(outlier[[2]])
if(isTRUE(length(index) != 0)){
df.test[index,"measurementStatus"] <- "outlier"
}
}
else if(isTRUE(nrow(sub) <= 10)){
df.test$measurementStatus[df.test$scientificName == sp[i]] <- "too few records"
}
else{
next
}
}
##write out Mahalanobis outlier test data----
length(unique(df.test$scientificName)) #4484; same as df
nrow(df.test) #3729042; same as df
write.csv(df.test, "mh.outlier.flagged.data.csv")
##Figure 1, panel 2: outliers----
df.fig2 <- df.test[df.test$lifeStage != "juvenile" &
df.test$measurementStatus != "too few records",]
df.fig2$cat <- paste(df.fig2$lifeStage, df.fig2$measurementStatus)
unique(df.fig2$cat)
df.fig2$cat[df.fig2$cat == "adult "] <- "Adult; possibly good" #darkorchid4
df.fig2$cat[df.fig2$cat == "adult outlier"] <- "Adult; outlier" #darkorchid1
df.fig2$cat[df.fig2$cat == "Not Collected " |
df.fig2$cat == " "] <- "No stage; untested" #lightgoldenrod1
df.fig2$cat <- as.factor(df.fig2$cat)
df.fig2$cat = relevel(df.fig2$cat, "Adult; possibly good")
df.fig2$cat <- factor(df.fig2$cat, levels = c("Adult; possibly good",
"Adult; outlier",
"No stage; untested"))
df.pema2 <- subset(df.fig2, df.fig2$scientificName == "Peromyscus maniculatus" &
df.fig2$measurementType == "{body mass}" &
!is.na(df.fig2$measurementValue))
df.pema2$measurementValue <- as.numeric(df.pema2$measurementValue)
length(df.pema2$measurementType) #30747
unique(df.pema2$cat)
length(df.pema2$cat[df.pema2$cat == "Adult; possibly good"]) #3024
length(df.pema2$cat[df.pema2$cat == "Adult; outlier"]) #1
length(df.pema2$cat[df.pema2$cat == "No stage; untested"]) #27722
p.pema2 <- ggplot() +
geom_density(data = filter(df.pema2, measurementStatus == "outlier"), aes(x = measurementValue), color = NA, alpha = 0.4) +
geom_rug(data = filter(df.pema2, measurementStatus == "outlier"), aes(x = measurementValue), sides = "b", col = "gray34") +
geom_density(data = df.pema2, aes(x = measurementValue, fill = cat), alpha = 0.4) +
scale_fill_manual(values = c("darkorchid4", "darkorchid1", "lightgoldenrod1"),
name = "Quality Category") +
ggtitle("Peromyscus maniculatus N = 30747, Noutlier = 1") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_x_continuous(name = "Body Mass (g)", limits = c(0, 50)) +
scale_y_continuous(name = "Density", limits = c(0, .25))
df.pema2$measurementValue[df.pema2$cat == "Adult; outlier"]
#outlier @17100g
ggsave(p.pema2, file=paste0("outlier.test.mouse",".png"), width = 14, height = 10, units = "cm")
df.otbe2 <- subset(df.fig2, df.fig2$scientificName == "Otospermophilus beecheyi" &
df.fig2$measurementType == "{body mass}" &
!is.na(df.fig2$measurementValue))
length(df.otbe2$measurementType)
unique(df.otbe2$cat)
length(df.otbe2$cat[df.otbe2$cat == "Adult; possibly good"])
length(df.otbe2$cat[df.otbe2$cat == "Adult; outlier"])
length(df.otbe2$cat[df.otbe2$cat == "No stage; untested"])
p.otbe2 <- ggplot() +
geom_density(data = filter(df.otbe2, measurementStatus == "outlier"), aes(x = measurementValue), color = NA, alpha = 0.4) +
geom_rug(data = filter(df.otbe2, measurementStatus == "outlier"), aes(x = measurementValue), sides = "b", col = "gray34") +
geom_density(data = df.otbe2, aes(x = measurementValue, fill = cat), alpha = 0.4) +
scale_fill_manual(values = c("darkorchid4", "darkorchid1", "lightgoldenrod1"),
name = "Data Quality Category") +
ggtitle("Otospermophilus beecheyi N = 222, Noutlier = 1") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_x_continuous(name = "Body Mass (g)", limits = c(0, 1500)) +
scale_y_continuous(name = "Density", limits = c(0, .01))
df.otbe2$measurementValue[df.otbe2$cat == "Adult; outlier"]
#outlier @169.5
ggsave(p.otbe2, file=paste0("outlier.test.squirrel",".png"), width = 14, height = 10, units = "cm")
##test for normality----
df.norm <- df.test
df.norm$normality <- ""
##test using Peromyscus maniculatus
test.pema <- subset(df.norm, subset = df.norm$scientificName == "Peromyscus maniculatus" &
df.norm$measurementStatus != "outlier" &
df.norm$measurementStatus != "too few records" &
df.norm$lifeStage == "adult" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value; inferred value")
normal.pema <- shapiro.test(test.pema$measurementValue[test.pema$measurementType == "body mass"]) #if sig then not normally distributed
#extract sig values
normal.pema[[2]]
#isTRUE(normal[[2]] < 0.05)
##TO DO: make into a function
sp <- unique(df.norm$scientificName)
##mass
for(i in 1:length(sp)){
sub <- subset(df.norm, subset = c(df.norm[,"scientificName"] == sp[i] &
df.norm$measurementStatus != "outlier" &
df.norm$measurementStatus != "too few records" &
df.norm$lifeStage == "adult" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value; inferred value"))
sub <- sub %>%
drop_na(measurementValue)
if(isTRUE(length(unique(sub$measurementValue[sub$measurementType == "body mass"])) < 3)){
df.norm$normality[df.norm$scientificName == sp[i] &
df.norm$measurementType == "body mass" &
df.norm$measurementStatus != "outlier" &
df.norm$measurementStatus != "too few records" &
df.norm$lifeStage == "adult" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value; inferred value"] <- "too few records"
}
else if(isTRUE(length(unique(sub$measurementValue[sub$measurementType == "body mass"])) >= 3)){
normal.mass <- shapiro.test(sub$measurementValue[sub$measurementType == "body mass"])
if(isTRUE(normal.mass[[2]] < 0.5)){
df.norm$normality[df.norm$measurementType == "body mass" &
df.norm$scientificName == sp[i] &
df.norm$measurementStatus != "outlier" &
df.norm$measurementStatus != "too few records" &
df.norm$lifeStage == "adult" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value; inferred value"] <- "non-normal"
}
else if(isTRUE(normal.mass[[2]] >= 0.5)){
df.norm$normality[df.norm$measurementType == "body mass" &
df.norm$scientificName == sp[i] &
df.norm$measurementStatus != "outlier" &
df.norm$measurementStatus != "too few records" &
df.norm$lifeStage == "adult" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value" &
df.norm$measurementMethod != "Extracted with Traiter ; estimated value; inferred value"] <- "normal"
}
}
else{
next
}
}
