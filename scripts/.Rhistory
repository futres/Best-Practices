## installed packages
library(tidyverse)
library(dplyr)
library(tibble)
library(anchors)
library(plyr)
library(reshape2)
library(janitor)
## updated set gets rid of columns w no data
cougar_template <- read.csv("https://raw.githubusercontent.com/futres/fovt-data-mapping/cougar_test/Mapping%20Files/column%20name%20template.csv")
cougar_data <- read.csv("https://de.cyverse.org/dl/d/F2088922-D273-49AE-985F-8D55966627A9/1987to2019_Cougar_Weight_Length_Public_Request.csv")
aepyceros_data <- read.csv("https://de.cyverse.org/dl/d/28031164-7903-4EC1-BA86-6441741BAB35/Extant_Aepyceros_database_updated_11_2016.csv", sep = ",", dec = " ")
aepyceros_template <- read.csv("https://raw.githubusercontent.com/futres/fovt-data-mapping/cougar_test/Mapping%20Files/ontology_codeBook.csv", header = TRUE, stringsAsFactors = TRUE)
## delete empty rows and columns
delete_empty_r_and_c <- function(data){
data <-data %>%
mutate_all(funs(na_if("", " "))) %>% # if value of something in the data is blank then set it to NA
remove_empty("cols") %>% # removes all NA cols
remove_empty("rows") # removes all NA rows
return(data)
}
status <- function(data, column, check, replace)
{
# data = dataframe
# column = selected cloumn from dataframe
# check = values already in data frame, vector created to check for these values
# replace = what the values from the check vector are to be replaced with
for(i in 1:length(check)) # i is incremented by 1, it starts at one and goes through how ever many values are in check
{
#data[,column][condition] <- replace[i]
data[,column][data[,column] == check[i]] <- replace[i]
}
return(data)
}
## update status
materialSampleType <- function(data, column, check, replace)
{
# data = dataframe
# column = selected cloumn from dataframe
# check = values already in data frame, vector created to check for these values
# replace = what the values from the check vector are to be replaced with
for(i in 1:length(check)) # i is incremented by 1, it starts at one and goes through how ever many values are in check
{
#data[,column][condition] <- replace[i]
data[,column][data[,column] == check[i]] <- replace[i]
}
return(data)
}
#Example
#data = cougar_data
#column = 'Status'
#check = c("A", "B", "C")
#replace = c("Whole Organism", "Part Organism - Skinned", "Part Organism - Gutted")
new.data <- materialSampleType(data = cougar_data, column = 'Status', check = c("A", "B", "C"), replace = c("Whole Organism", "Part Organism - Skinned", "Part Organism - Gutted"))
new.data$Status
colnames(cougar_data)
##function to clean up sex types if mispelled or not complete
sex <- function(data, column)
{
# data = dataframe
# column = selected column from data frame
data[,column] <- gsub(pattern = "\\<f", replacement = "female", data[,column], ignore.case = TRUE) # if values in the column starts w 'f' replace it with 'female'
data[,column] <- gsub(pattern = "\\<m", replacement = "male", data[,columna], ignore.case = TRUE) # if values in the column starts w 'r' replace it with 'male'
return(data)
}
#Example
#data = cougar_data
#column = 'Sex'
new.data <- sex(data = cougar_data, column = 'Sex')
##function to clean up sex types if misspelled or not complete
sex <- function(data, column)
{
# data = dataframe
# column = selected column from data frame
data[,column] <- gsub(pattern = "\\<f", replacement = "female", data[,column], ignore.case = TRUE) # if values in the column starts w 'f' replace it with 'female'
data[,column] <- gsub(pattern = "\\<m", replacement = "male", data[,column], ignore.case = TRUE) # if values in the column starts w 'r' replace it with 'male'
return(data)
}
#Example
#data = cougar_data
#column = 'Sex'
new.data <- sex(data = cougar_data, column = 'Sex')
new.data$Sex
cougar_data$Sex
colnames(aepyceros_data)
deer_data <- read.csv("EAP Florida Modern Deer Measurements_FORFUTRES_1_23_2020.csv", header = TRUE, stringsAsFactors = FALSE)
deer_data <- read.csv("https://de.cyverse.org/dl/d/30A65CAC-9C21-4EC3-B2D9-90C71F8AF93B/EAP_Florida_Modern_Deer_Measurements_FORFUTRES_1_23_2020.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(deer_data)
head(deer_data)
deer_data <- read.csv("https://de.cyverse.org/dl/d/0E1B3FC0-ADCC-45E7-95ED-F4E11075CF49/EAP_Florida_Modern_Deer_Measurements_FORFUTRES_1_23_2020.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(deer_data)
##function to clean up side of bone
measurementSide <- function(data, column)
{
# data = dataframe
# column = selected column from data frame
data[,column] <- gsub(pattern = "\\<l", replacement = "left", data[,column], ignore.case = TRUE) # if values in the column starts w 'l' replace it with 'left'
data[,column] <- gsub(pattern = "\\<r", replacement = "right", data[,column], ignore.case = TRUE) # if values in the column starts w 'r' replace it with 'female'
}
#Example
#data = deer_data
#column = 'Side'
new.data <- measurementSide(data = deer_data, column = 'Side')
new.data$Side
##function to clean up side of bone
measurementSide <- function(data, column)
{
# data = dataframe
# column = selected column from data frame
data[,column] <- gsub(pattern = "\\<l", replacement = "left", data[,column], ignore.case = TRUE) # if values in the column starts w 'l' replace it with 'left'
data[,column] <- gsub(pattern = "\\<r", replacement = "right", data[,column], ignore.case = TRUE) # if values in the column starts w 'r' replace it with 'female'
return(data)
}
#Example
#data = deer_data
#column = 'Side'
new.data <- measurementSide(data = deer_data, column = 'Side')
new.data$Side
deer_data$ageValue
deer_data$lifeStage
unique(deer_data$lifeStage)
unique(aepyceros_data$Age..juv..prime.adult..older.adult..old.)
deer_data$sex
deer_data$reproductiveCondition
unique(deer_data$reproductiveCondition)
##function to clean up life-stage
life_stage <- function(data, adult, juvenile)
{
# data = dataframe
# adult = vector of all possible adult values
# juvenile = vector of all possible juvenile values
for(i in 1:length(adult)) # i is incremented by 1, it starts at one and goes through how ever many values are in adult
{
#data[,column][condition] <- juvenile[i]
data[,column][data[,column] == adult[i]] <- juvenile[i]
}
return(data)
}
##function to standardize reproductive condition
reproductiveCondition <- function(data, column, reproductive, non.reproductive)
{
# data = dataframe
# column = column where reproductive/non.reproductive data is being stored
# reproductive = vector of things that are classified as reproductive
# non.reproductive = vector of things that are classified as non-reproductive
for(i in 1:length(reproductive)) # i is incremented by 1, it starts at one and goes through how ever many values are in reproductive
{
data[,column][data[,column] == reproductive[i]] <- "reproductive"
}
for(i in 1:length(non.reproductive)) # i is incremented by 1, it starts at one and goes through how ever many values are in non.reproductive
{
data[,column][data[,column] == non.reproductive[i]] <- "non-reproductive"
}
}
new.data <- reproductiveCondition(data = deer_data, column = "reproductiveCondition",
reproductive = c("several weeks pregnant", "\"pregnant (2 fetus) within two weeks of birth\"", "\"pregnant, 1 female fetus 22 wks\"", "\"not preg, quiet ovaries, lactating, lots of milk, enlarged glands\"", "\"non pregnant\" lactating", "\"not pregnant\" lactating", "non pregnant, not lactating but glands present, note says 2 yearlings nearby", "pregnant, 1 fetus female 23 weeks (#85-61)", "non pregnant, not lactating, medium nipples", "non pregnant, lactating", "not pregnant, maybe lactating", "not pregnant, lactating, \"fawn at side #85-66\" (although note that 85-66 in this list is 16 months so not suckling fawn, and actually 85-68 lists Dam as 85-67 so that was an error and fawn is 85-68)", "not pregnant, lactating", "non pregnant, lactating, had ~6-7mo fawn at side", "lactating [assume non pregnant]"),
non.reproductive = c("not pregnant, not lactating", "non pregnant, not lactating", "non pregnant, non lactating"))
##function to standardize reproductive condition
reproductiveCondition <- function(data, column, reproductive, non.reproductive)
{
# data = dataframe
# column = column where reproductive/non.reproductive data is being stored
# reproductive = vector of things that are classified as reproductive
# non.reproductive = vector of things that are classified as non-reproductive
for(i in 1:length(reproductive)) # i is incremented by 1, it starts at one and goes through how ever many values are in reproductive
{
data[,column][data[,column] == reproductive[i]] <- "reproductive"
}
for(i in 1:length(non.reproductive)) # i is incremented by 1, it starts at one and goes through how ever many values are in non.reproductive
{
data[,column][data[,column] == non.reproductive[i]] <- "non-reproductive"
}
return(data)
}
new.data <- reproductiveCondition(data = deer_data, column = "reproductiveCondition",
reproductive = c("several weeks pregnant", "\"pregnant (2 fetus) within two weeks of birth\"", "\"pregnant, 1 female fetus 22 wks\"", "\"not preg, quiet ovaries, lactating, lots of milk, enlarged glands\"", "\"non pregnant\" lactating", "\"not pregnant\" lactating", "non pregnant, not lactating but glands present, note says 2 yearlings nearby", "pregnant, 1 fetus female 23 weeks (#85-61)", "non pregnant, not lactating, medium nipples", "non pregnant, lactating", "not pregnant, maybe lactating", "not pregnant, lactating, \"fawn at side #85-66\" (although note that 85-66 in this list is 16 months so not suckling fawn, and actually 85-68 lists Dam as 85-67 so that was an error and fawn is 85-68)", "not pregnant, lactating", "non pregnant, lactating, had ~6-7mo fawn at side", "lactating [assume non pregnant]"),
non.reproductive = c("not pregnant, not lactating", "non pregnant, not lactating", "non pregnant, non lactating"))
new.data$reproductiveCondition
unique(deer_data$lifeStage)
reproductive <- c(!(""), !("--"), !(non.reproductive))
##function to clean up life-stage
life_stage <- function(data, adult, juvenile)
{
# data = dataframe
# adult = vector of all possible adult values
# juvenile = vector of all possible juvenile values
for(i in 1:length(adult)) # i is incremented by 1, it starts at one and goes through how ever many values are in adult
{
data[,column][data[,column] == adult[i]] <- juvenile[i]
}
return(data)
}
reproductive <- c("", "--", non.reproductive)
non.reproductive <- c("not pregnant, not lactating", "non pregnant, not lactating", "non pregnant, non lactating")
reproductive <- c("", "--", non.reproductive)
reproductive
!reproductive
new.data <- reproductiveCondition(data = deer_data, column = "reproductiveCondition",
reproductive = -c("", "--", non.reproductive),
non.reproductive = c("not pregnant, not lactating", "non pregnant, not lactating", "non pregnant, non lactating"))
non.reproductive <- c("not pregnant, not lactating", "non pregnant, not lactating", "non pregnant, non lactating")
reproductive <- reproductive[-c("", "--", non.reproductive)]
reproductive <- unique(deer_data$reproductiveCondition)
reproductive <- reproductive[-c("", "--", non.reproductive)]
reproductive
str(reproductive)
reproductive <- reproductive[-c("", "--", non.reproductive)]
reproductive <- unique(deer_data$reproductiveCondition)
reproductive <- reproductive[-c("", "--")]
reproductive <- reproductive[-("", "--", non.reproductive)]
reproductive <- reproductive[-("", "--")]
reproductive <- reproductive[-non.reproductive]
index <- c("", "--", non.reproductive
index
index <- c("", "--", non.reproductive)
index
reproductive <- reproductive[!(reproductive %in% index)]
reproductive
new.data <- reproductiveCondition(data = deer_data, column = "reproductiveCondition",
reproductive = -reproductive,
non.reproductive = non.reproductive)
new.data <- reproductiveCondition(data = deer_data, column = "reproductiveCondition",
reproductive = reproductive,
non.reproductive = non.reproductive)
new.data$reproductiveCondition
unique(aepyceros_data$Age..juv..prime.adult..older.adult..old.)
juvenile = c("Juvenile (2)", "juvenile (22-24 months), M3 erupting", "Juvenile (?) 2+ years")
adult = unique(aepyceros_data$Age..juv..prime.adult..older.adult..old.)
index = c("", juvenile)
adult = adult[!(adult %in% index)]
##function to clean up life-stage
lifeStage <- function(data, column, adult, juvenile)
{
# data = dataframe
# adult = vector of all possible adult values
# juvenile = vector of all possible juvenile values
for(i in 1:length(adult)) # i is incremented by 1, it starts at one and goes through how ever many values are in adult
{
data[,column][data[,column] == adult[i]] <- juvenile[i]
}
return(data)
}
new.data <- lifeStage(data = aepyceros_data, column = 'Age..juv..prime.adult..older.adult..old.',
adult = adult, juvenile = juvenile)
new.data$lifeSt ge
new.data$lifeStage
##function to clean up life-stage
lifeStage <- function(data, column, adult, juvenile)
{
# data = dataframe
# adult = vector of all possible adult values
# juvenile = vector of all possible juvenile values
for(i in 1:length(adult)) # i is incremented by 1, it starts at one and goes through how ever many values are in adult
{
data[,column][data[,column] == adult[i]] <- "adult"
}
for(i in 1:length(juvenile)) # i is incremented by 1, it starts at one and goes through how ever many values are in juvenile
{
data[,column][data[,column] == juvenile[i]] <- "juvenile"
}
return(data)
}
juvenile = c("Juvenile (2)", "juvenile (22-24 months), M3 erupting", "Juvenile (?) 2+ years")
adult = unique(aepyceros_data$Age..juv..prime.adult..older.adult..old.)
index = c("", juvenile)
adult = adult[!(adult %in% index)]
new.data <- lifeStage(data = aepyceros_data, column = 'Age..juv..prime.adult..older.adult..old.',
adult = adult, juvenile = juvenile)
new.data$Age..juv..prime.adult..older.adult..old.
##function to clean up life-stage
lifeStage <- function(data, column, adult, juvenile)
{
# data = dataframe
# adult = vector of all possible adult values
# juvenile = vector of all possible juvenile values
for(i in 1:length(adult)) # i is incremented by 1, it starts at one and goes through how ever many values are in adult
{
data[,column][data[,column] == adult[i]] <- juvenile[i]
}
return(data)
}
juvenile = c("Juvenile (2)", "juvenile (22-24 months), M3 erupting", "Juvenile (?) 2+ years")
adult = unique(aepyceros_data$Age..juv..prime.adult..older.adult..old.)
index = c("", juvenile)
adult = adult[!(adult %in% index)]
new.data <- lifeStage(data = aepyceros_data, column = 'Age..juv..prime.adult..older.adult..old.',
adult = adult, juvenile = juvenile)
new.data$Age..juv..prime.adult..older.adult..old.
colnames(deer_data)
colnames(cougar_template)
## rename columns to match the template
template_match<- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
}
}
return(data)
}
new.data <- template_match(data = cougar_data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(new.data)
cougar_template
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
}
else{
next
}
}
return(data)
}
new.data <- template_match(data = cougar_data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
cougar_template
colnames(new.data)
