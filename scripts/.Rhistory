new.data <- melt_data(data = cougar_data, cols = c("Weight", "Length"))
## melt data & filter empty values
melt_data <- function(data, cols)
{
# data = dataframe
# cols = vector of columns to melt
data <- melt(data, measure.vars = c(col1, col2)) # takes data from col1 and col2 and places it all into a column called value & labels this data from col1 and col2 with the names of those two columns
dplyr::filter(data, !is.na(value)) # deletes all NA in value column
}
#Example
#data = cougar_data
#cols = c("Weight", "Length") or c(7,8)
new.data <- melt_data(data = cougar_data, cols = c("Weight", "Length"))
require(reshape2)
## melt data & filter empty values
melt_data <- function(data, cols)
{
# data = dataframe
# cols = vector of columns to melt
data <- reshape2::melt(data, measure.vars = c(col1, col2)) # takes data from col1 and col2 and places it all into a column called value & labels this data from col1 and col2 with the names of those two columns
dplyr::filter(data, !is.na(value)) # deletes all NA in value column
}
#Example
#data = cougar_data
#cols = c("Weight", "Length") or c(7,8)
new.data <- melt_data(data = cougar_data, cols = c("Weight", "Length"))
#Example
#data = cougar_data
#cols = c("Weight", "Length") or c(7,8)
new.data <- melt_data(data = cougar_data, cols = c("Weight", "Length"))
## melt data & filter empty values
melt_data <- function(data, cols)
{
# data = dataframe
# cols = vector of columns to melt
data <- reshape2::melt(data, measure.vars = cols) # takes data from col1 and col2 and places it all into a column called value & labels this data from col1 and col2 with the names of those two columns
dplyr::filter(data, !is.na(value)) # deletes all NA in value column
}
#Example
#data = cougar_data
#cols = c("Weight", "Length") or c(7,8)
new.data <- melt_data(data = cougar_data, cols = c("Weight", "Length"))
new.data
ew.data <- melt_data(data = cougar_data, cols = c(7,8))
ew.data
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
for(i in 1:ncol(data)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- replace_name[i]
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
melt.data
colnames(melt.data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
replace_name <- as.vector(template[,new])
# for(i in 1:ncol(data))
for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- replace_name[i]
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
melt.data
colnames(melt.data)
cougar_template[,2]
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data))
#for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- replace_name[i]
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
cougar_template
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data))
#for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- replace_name[i]
}
else{
next
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data )
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
replace_name <- as.vector(template[,new])
#for(i in 1:ncol(data))
for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- replace_name[i]
}
else{
next
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
colnames(new.data)
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data))
#for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- template[,new][template[,old] == cols[i]]
}
else{
next
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data))
#for(i in 1:nrow(template)) # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
{
if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
{
if(isTRUE(template[,old] == cols[i]))
{
colnames(data)[i] <- template[,new][template[,old] == cols[i]] #replce_name[i]
}
}
else {
next
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data)){
#for(i in 1:nrow(template)){ # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
if(isTRUE(colnames(data)[i] %in% template[,old])){ # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
if(isTRUE(template[,old] == cols[i])){
colnames(data)[i] <- template[,new][template[,old] == cols[i]] #replce_name[i]
}
else{
next
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
library(janitor)
## LOAD DATA
cougar_template <- read.csv("https://raw.githubusercontent.com/futres/fovt-data-mapping/cougar_test/Mapping%20Files/column%20name%20template.csv")
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
replace_name <- as.vector(template[,new])
#for(i in 1:ncol(data)){
for(i in 1:nrow(template)){ # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
if(isTRUE(colnames(data)[i] %in% template[,old])){ # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
if(isTRUE(template[,old] == cols[i])){
colnames(data)[i] <- template[,new][template[,old] == cols[i]] #replce_name[i]
}
else{
next
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
colnames(new.data)
colnames(cougar_data)
names(cougar_data) <- gsub("\\.", " ", colnames(data))
names(cougar_data)
colnames(cougar_data)
## LOAD DATA
cougar_template <- read.csv("https://raw.githubusercontent.com/futres/fovt-data-mapping/cougar_test/Mapping%20Files/column%20name%20template.csv")
cougar_data <- read.csv("https://de.cyverse.org/dl/d/F2088922-D273-49AE-985F-8D55966627A9/1987to2019_Cougar_Weight_Length_Public_Request.csv")
names(cougar_data)
names(cougar_data) <- gsub("\\.", " ", colnames(cougar_data))
names(cougar_data)
cols <- colnames(cougar_data)
cols
colnames(cougar_template)
replace_name <- as.vector(cougar_template[,"Template.Name"])
replace_name
colnames(cougar_data)[1] <- cougar_template[,"Template.Name"][cougar_template[,"Column.Name"] == cols[1]]
colnames(cougar_data)[1]
colnames(cougar_data)[2] <- cougar_template[,"Template.Name"][cougar_template[,"Column.Name"] == cols[2]]
colnames(cougar_data)[2]
nrow(cougar_template)
nrow(cougar_data)
ncol(cougar_data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data)){
#for(i in 1:nrow(template)){ # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
if(isTRUE(colnames(data)[i] %in% template[,old])){ # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
if(isTRUE(template[,old] == cols[i])){
colnames(data)[i] <- template[,new][template[,old] == cols[i]] #replce_name[i]
}
else{
next
}
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
#Example
#data = new.data
#template = cougar_template
#old = 'Column.Name'
#new = 'Template.Name'
new.data <- melt_data(data = cougar_data, cols = c(7,8))
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
colnames(data)[1]
colnames(cougar_data)[1]
colnames(cougar_data)[2] %in% cougar_template[,"Column.Name"]
cougar_template
colnames(cougar_data)[2]
colnames(cougar_data)[3] %in% cougar_template[,"Column.Name"]
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
cols <- colnames(data) # vector cols created w column names of dataframe as values
#replace_name <- as.vector(template[,new])
for(i in 1:ncol(data)){
#for(i in 1:nrow(template)){ # i incremented by 1 starting at 1 and ending at how ever many rows are in the template data
if(isTRUE(colnames(data)[i] %in% template[,old])){ # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
colnames(data)[i] <- template[,new][template[,old] == cols[i]] #replce_name[i]
}
else{
next
}
}
# if(isTRUE(colnames(data)[i] %in% template[,old])) # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
# {
#   colnames(data)[i] <- template[,new][template[,old] == cols[i]] # if condition from is statement is met rename column in the original data set whatever it is being mapped to in the template data
# }
return(data)
}
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
## rename columns to match the template
template_match <- function(data, template, old, new)
{
# data = dataframe
# template = terms being mapped
# old = old names of columns
# new = new names of columns
names(data) <- gsub("\\.", " ", colnames(data))
#cols <- colnames(data) # vector cols created w column names of dataframe as values
for(i in 1:ncol(data)){ # i incremented by 1 starting at 1 and ending at how ever many columns are in the data
if(isTRUE(colnames(data)[i] %in% template[,old])){ # if the name of the column from the old column exists  then move on to the next line if not data is incremented again
colnames(data)[i] <- template[,new][template[,old] == colnames(data)[i]]
}
else{
next
}
}
return(data)
}
melt.data <- template_match(data = new.data, template = cougar_template, old = 'Column.Name', new = "Template.Name")
colnames(melt.data)
deer_data <- read.csv("https://de.cyverse.org/dl/d/0E1B3FC0-ADCC-45E7-95ED-F4E11075CF49/EAP_Florida_Modern_Deer_Measurements_FORFUTRES_1_23_2020.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(deer_data)
deer_data$sex
##function to clean up sex types if misspelled or not complete
sex <- function(data, column)
{
# data = dataframe
# column = selected column from data frame
data[,column] <- replace(data[,column], grep("^f", data[,column], ignore.case = TRUE), "female") # if values in the column starts w 'f' replace it with 'female'
data[,column] <- replace(data[,column], grep("^m", data[,column], ignore.case = TRUE), "male") # if values in the column starts w 'r' replace it with 'male'
return(data)
}
#Example
#data = deer_data
#column = sex
new.data <- sex(data = deer_data, column = 'sex')
unique(new.data$samplingProtocol)
unique(new.data$sex)
